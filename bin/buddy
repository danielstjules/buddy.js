#!/usr/bin/env node

var fs        = require('fs');
var path      = require('path');
var strip     = require('strip-json-comments');
var chalk     = require('chalk');
var filepaths = require('node-filepaths');
var program   = require('commander');
var Detector  = require('../lib/detector');
var reporters = require('../lib/reporters');

function paths(val) {
  return val.split(',');
}

program
  .version(require('../package.json').version)
  .usage('[options] <paths ...>')
  .option('-d, --detect-objects', 'detect object expressions and properties')
  .option('-e, --enforce-const', 'require literals to be defined using const')
  .option('-i, --ignore <numbers>', 'list numbers to ignore (default: 0,1)')
  .option('-I, --disable-ignore', 'disables the ignore list')
  .option('-r, --reporter [simple|detailed|json]',
    'specify reporter to use (default: simple)')
  .option('-C, --no-color', 'disables colors')
  .option('-E, --exclude <paths>', 'folders to exclude separated by comma', paths)
  .parse(process.argv);

// Check and parse .buddyrc file, if it exists
var rcPath, rcContents, rc, opt;
rcPath = path.resolve(process.cwd(), '.buddyrc');
opts = {encoding: 'utf8'};

if (fs.existsSync(rcPath) && fs.lstatSync(rcPath).isFile()) {
  try {
    rcContents = strip(fs.readFileSync(rcPath, opts));
    rc = JSON.parse(rcContents);
  } catch (e) {
    console.log('Invalid .buddyrc file:', e.message);
    process.exit(1);
  }

  ['detectObjects', 'enforceConst', 'ignore', 'reporter'].forEach(function(opt) {
    if (program[opt] === undefined) {
      program[opt] = rc[opt];
    }
  });
}

// Assume all unconsumed arguments are paths
var suppliedPaths = (program.args.length) ? program.args : ['.'];
var ignoredPaths = ['node_modules', '.git'].concat(program.exclude || []);
// chalk doesn't support short flags by default
if (!program.color) {
  chalk.enabled = false;
}
// Iterate over the given paths, and recurse if they're directories
try {
  var paths = filepaths.getSync(suppliedPaths, {
    suffix: '.js',
    ignore: ignoredPaths
  });
} catch(e) {
  console.log(e.message);
  process.exit(3);
}

if (!paths.length) {
  console.log('No .js files found in the list of paths');
  process.exit(0);
}

// Get the list of numbers to ignore
var ignore = program.disableIgnore ? [] : (program.ignore || [0, 1]);

// Retrieve the requested reporter, defaulting to simple
var reporterType = reporters[program.reporter] || reporters.simple;

var detector = new Detector(paths, {
  detectObjects: program.detectObjects,
  enforceConst: program.enforceConst,
  ignore: ignore
});
var reporter = new reporterType(detector);

var found = 0;
detector.on('found', function() {
  found++;
});

detector.run().then(function() {
  process.exit(found ? found : 0);
}).catch(function(err) {
  console.log(err);
  process.exit(1);
});
